; ==========================================
; loop_execution_exploit.asm
; MSP430 firmware
; By Samuel Tan <samueltan@gmail.com>
; ==========================================
;
; Simple MSP430 Firmware vulnerable to the loop
; execution exploit described in my IOP paper.
; Refer to paper for detailed narration of code

.org 0x3100

RESET_HANDLER:
    mov.w #0x13DA, R1       ; initialize SP
    mov.w #0x5AE0, &0x120   ; disable WDT, NMI mode, accepted on falling edge
    mov.w #0x0, &0x200      ; clear state accumulation destinations
    mov.w #0x0, &0x202
    bis.b #0x1, &0x0022
    bic.b #0x1, &0x0021     ; turn off LED (in case it is on)
    bis.b #0x10, &0x000     ; enable NMI
    clr.w R11
led_blink_loop:             ; LED blinking loop
    add.w #0x1, R11
    call #0x3200            ; call BLINK_LED
    cmp.w R11, &0x200
    jnz led_blink_loop
spin:
    jmp spin

.org 0x3200
BLINK_LED:
    push.w R10
    bis.b #0x1, &0x0021     ; turn on LED
    clr.w R10
keep_led_on:
    add.w #0x1, R10         ; keep LED on
    nop
    nop
    cmp.w #0xFFFF, R10
    jnz keep_led_on
    bic.b #0x1, &0x0021     ; turn off LED
    clr.w R10
keep_led_off:
    add.w #0x1, R10         ; keep LED off
    nop
    nop
    cmp.w #0xFFFF, R10
    jnz keep_led_off
    pop.w R10
    ret

.org 0x3400

NMI_HANDLER:
    bic.b #0x10, &0x002     ; clear NMI interrupt flag
    bis.b #0x10, &0x000     ; enable NMI
    add.w #0x1, &0x202      ; accumulate stae in 0x202
    nop                     ; nest interrupt here
    mov.w &0x202, &0x200    ; write accumulated state
    reti

    .org 0xfffc             ; interrupt vector table entries
    .word 0x3400
    .org 0xfffe
    .word 0x3100